#!/usr/bin/env python3
import os
import sys
import subprocess
import shutil

from snakemake.utils import read_job_properties

## Code below copied from the extern python package. Copy the code here so there are no dependencies.

def run(command, stdin=None):
    '''
    Run a subprocess.check_output() with the given command with
    'bash -c command'
    returning the stdout. If the command fails (i.e. has a non-zero exitstatus),
    raise a ExternCalledProcessError that includes the $stderr as part of
    the error message

    Parameters
    ----------
    command: str
        command to run
    stdin: str or None
        stdin to be provided to the process, to subprocess.communicate.

    Returns
    -------
    Standard output of the run command

    Exceptions
    ----------
    extern.ExternCalledProcessError including stdout and stderr of the run
    command should it return with non-zero exit status.
    '''
    #logging.debug("Running extern cmd: %s" % command)

    using_stdin = stdin is not None
    process = process = subprocess.Popen(
        ["bash",'-o','pipefail',"-c", command],
        stdin= (subprocess.PIPE if using_stdin else None),
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate(stdin)

    if process.returncode != 0:
        raise ExternCalledProcessError(process, command, stdout.decode(), stderr.decode())
    return stdout

#%% CLASSES ##########
######################

class ExternCalledProcessError(subprocess.CalledProcessError):
    def __init__(self, completed_process, command, stdout, stderr):
        self.command = command
        self.returncode = completed_process.returncode
        self.stderr = stderr
        self.stdout = stdout
        self.completed_process = completed_process

    def __str__(self):
        return "Command %s returned non-zero exit status %i.\n"\
            "STDERR was: %sSTDOUT was: %s" % (
                self.command,
                self.returncode,
                self.stderr,
                self.stdout)

if __name__ == '__main__':

    jobscript = sys.argv[1]
    job_properties = read_job_properties(jobscript)

    threads = job_properties['threads']
    mem_mb = job_properties['resources']['mem_mb']
    mem_gb = int(mem_mb / 1000)

    if 'runtime' in job_properties['resources']:
        runtime_mins = job_properties['resources']['runtime']
        runtime_hours = "--hours {}".format(int(runtime_mins / 60))
    else:
        runtime_hours = ''


    if 'queue' in job_properties['resources']:
        queue = '-q '+job_properties['resources']['queue']
    else:
        queue = ''

    # shutil.copyfile(jobscript, "/tmp/benjob.sh")
    mqsub_stdout = run("mqsub --seg --no-email --quiet --bg -t {threads} -m {mem} {hours} --script {script} {queue} 2>&1".format(
        threads=threads, script=jobscript, mem=mem_gb, hours=runtime_hours, queue=queue))
    with open("/tmp/benout", 'w') as f:
        f.write(mqsub_stdout.decode())
    
    # Print the pbs ID as expected by snakemake
    correct_line = [line for line in mqsub_stdout.decode().split('\n') if line.startswith('qsub stdout: ')]
    if len(correct_line) != 1:
        raise ValueError("mqsub returned unexpected output: {}".format(mqsub_stdout.decode()))
    else:
        print(correct_line[0].strip().replace('qsub stdout: ',''))
